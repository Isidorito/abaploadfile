*&---------------------------------------------------------------------*
*& Report  Z_UPLOAD
*&
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*

REPORT  zlicc_load.

TYPES: BEGIN OF ty_output,
          lgtyp     TYPE lagp-lgtyp,
          lgpla     TYPE lagp-lgpla,
          matnr     TYPE lqua-matnr,
          comment   TYPE string,
          oldidatu  TYPE char10,
          newidatu  TYPE char10,
          abcin     TYPE marc-abcin,
        END OF ty_output,

        BEGIN OF ty_cc,
          matnr TYPE marc-matnr,
          werks TYPE marc-werks,
          abcin TYPE marc-abcin,
        END OF ty_cc.

DATA: it_file     TYPE TABLE OF string,
      wa_file     TYPE string,
      it_output   TYPE TABLE OF ty_output,
      wa_output   TYPE ty_output,
      it_cc       TYPE TABLE OF ty_cc,
      wa_cc       TYPE ty_cc,
*     variables to complete the ALV title
      lv_file     TYPE string,
      lv_count    TYPE string,
      lv_rbcount  TYPE string,
      lv_title    TYPE lvc_title.

****Needed for ALV

TYPE-POOLS: slis.
DATA: g_it_fieldcat TYPE slis_t_fieldcat_alv,
      g_st_fieldcat TYPE slis_fieldcat_alv.
****


*&---------------------------------------------------------------------*
*                         SELECTION-SCREEN
*&---------------------------------------------------------------------*

PARAMETERS p_file LIKE rlgrap-filename.
PARAMETERS p_werks TYPE marc-werks OBLIGATORY DEFAULT 'F002'.


*&---------------------------------------------------------------------*
*                               SELECTION SCREEN
*&---------------------------------------------------------------------*

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.

  CALL FUNCTION 'F4_FILENAME'
    IMPORTING
      file_name = p_file.

*We move to lv_file to avoid issues with GUI_UPLOAD filename format

  lv_file = p_file.
*&---------------------------------------------------------------------*
*                               MAIN
*&---------------------------------------------------------------------*
START-OF-SELECTION.
  PERFORM get_file.

  IF it_file IS NOT INITIAL.

    PERFORM process_data.

  ENDIF.

  PERFORM print_output.

*&---------------------------------------------------------------------*
*&      Form  GET_FILE
*&---------------------------------------------------------------------*
* Uploading the file into a table
* Each line its a string because we receive multiple formats
*  - Record rows
*  - Spool headers (Will be deleted in another step)
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_file .

  CALL FUNCTION 'GUI_UPLOAD'
  EXPORTING
    filename                      = lv_file
*   FILETYPE                      = 'ASC'
*   HAS_FIELD_SEPARATOR           = ' '
*   HEADER_LENGTH                 = 0
*   READ_BY_LINE                  = 'X'
*   DAT_MODE                      = ' '
*   CODEPAGE                      = ' '
*   IGNORE_CERR                   = ABAP_TRUE
*   REPLACEMENT                   = '#'
*   CHECK_BOM                     = ' '
*   VIRUS_SCAN_PROFILE            =
*   NO_AUTH_CHECK                 = ' '
* IMPORTING
*   FILELENGTH                    =
*   HEADER                        =
  TABLES
    data_tab                      = it_file
 EXCEPTIONS
   file_open_error               = 1
   file_read_error               = 2
   no_batch                      = 3
   gui_refuse_filetransfer       = 4
   invalid_type                  = 5
   no_authority                  = 6
   unknown_error                 = 7
   bad_data_format               = 8
   header_not_allowed            = 9
   separator_not_allowed         = 10
   header_too_long               = 11
   unknown_dp_error              = 12
   access_denied                 = 13
   dp_out_of_memory              = 14
   disk_full                     = 15
   dp_timeout                    = 16
   OTHERS                        = 17
          .
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " GET_FILE
*&---------------------------------------------------------------------*
*&      Form  PROCESS_DATA
*&---------------------------------------------------------------------*
* Moving just the record lines
* Avoiding lines added in the spool
* Using |X as condition to check if the line its a record
* The X its added in the file but not viewable in the spool
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM process_data .

  LOOP AT it_file INTO wa_file.

    IF wa_file IS NOT INITIAL.
      IF ( wa_file(2) = '|X') OR ( wa_file CS 'Ready / Blocked'   ) .   "In further versions, this logic could be changed to check every posible state instead of |X

*       We accumulate the R/B records to use it in the ALV title
        IF wa_file CS 'Ready / Blocked' .
          lv_rbcount = lv_rbcount + 1.
        ENDIF.

        SPLIT wa_file+3
         AT '|'
          INTO  wa_output-lgtyp
              wa_output-lgpla
              wa_output-matnr
              wa_output-comment
              wa_output-oldidatu
              wa_output-newidatu
              .

        APPEND wa_output TO it_output.
        CLEAR wa_output.

      ENDIF.
    ENDIF.
  ENDLOOP.

*At this point it_output contains the full list of records
* but misses the werks from MARC table

  IF it_output IS NOT INITIAL.

    SELECT  matnr
            werks
            abcin
            FROM                marc
            INTO TABLE          it_cc
            FOR ALL ENTRIES IN  it_output
            WHERE               matnr = it_output-matnr
            AND                 werks = p_werks
    .
  ENDIF.

*  Now we pass the ABCIN value from it_cc to it_output

  IF it_cc IS NOT INITIAL.

    CLEAR wa_output.

    LOOP AT it_output INTO wa_output.

      READ TABLE it_cc
      INTO       wa_cc
      WITH KEY   matnr = wa_output-matnr.

      IF sy-subrc = 0.
        wa_output-abcin = wa_cc-abcin.
      ENDIF.

      MODIFY it_output FROM wa_output.
      CLEAR wa_output.

    ENDLOOP.

  ENDIF.

ENDFORM.                    " PROCESS_DATA
*&---------------------------------------------------------------------*
*&      Form  PRINT_OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM print_output .

* Datos del fieldcat para el ALV
  g_st_fieldcat-fieldname = 'LGTYP'. "Nombre del campo de la tabla
  g_st_fieldcat-seltext_m = 'Type'. "Descripción media
  g_st_fieldcat-seltext_s = 'Typ'. "Descripción corta
  APPEND g_st_fieldcat TO g_it_fieldcat.

  g_st_fieldcat-fieldname = 'LGPLA'.
  g_st_fieldcat-seltext_m = 'Storage Bin'.
  g_st_fieldcat-seltext_s = 'Stor. Bin'.
  APPEND g_st_fieldcat TO g_it_fieldcat.

  g_st_fieldcat-fieldname = 'MATNR'.
  g_st_fieldcat-seltext_m = 'Material'.
  g_st_fieldcat-seltext_s = 'Mat'.
  APPEND g_st_fieldcat TO g_it_fieldcat.

  g_st_fieldcat-fieldname = 'COMMENT'.
  g_st_fieldcat-seltext_m = 'Comments'.
  g_st_fieldcat-seltext_s = 'Comm.'.
  APPEND g_st_fieldcat TO g_it_fieldcat.

  g_st_fieldcat-fieldname = 'OLDIDATU'.
  g_st_fieldcat-seltext_m = 'Old Inventory'.
  g_st_fieldcat-seltext_s = 'Old Inv.'.
  APPEND g_st_fieldcat TO g_it_fieldcat.

  g_st_fieldcat-fieldname = 'NEWIDATU'.
  g_st_fieldcat-seltext_m = 'New Inventory'.
  g_st_fieldcat-seltext_s = 'New Inv.'.
  APPEND g_st_fieldcat TO g_it_fieldcat.

  g_st_fieldcat-fieldname = 'ABCIN'.
  g_st_fieldcat-seltext_m = 'Cycle Counting'.
  g_st_fieldcat-seltext_s = 'C.C.'.
  APPEND g_st_fieldcat TO g_it_fieldcat.

  DESCRIBE TABLE it_output LINES lv_count.

  lv_count = lv_count - lv_rbcount.

  CONCATENATE 'InventoryProposal:  '  lv_count ' Ready / Blocked:  ' lv_rbcount INTO lv_title SEPARATED BY ' ' .

* Función ALV
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      it_fieldcat   = g_it_fieldcat[]
      i_grid_title  = lv_title
    TABLES
      t_outtab      = it_output[]
    EXCEPTIONS
      program_error = 1
      OTHERS        = 2.

ENDFORM.                    " PRINT_OUTPUT
